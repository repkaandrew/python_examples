"""
2. Доработать алгоритм Дейкстры (рассматривался на уроке),
чтобы он дополнительно возвращал список вершин, которые необходимо обойти.
"""
from collections import namedtuple


def dejkstra(graph, start):
	"""
	Функция поиска оптимальных путей в графе.
	Возвращает список вершин в формате ('Vertex', ['name', 'path_cost', 'path'])
	:param graph:
	:param start: базовая вершина
	:return: list of Vertex
	"""
	length = len(graph)
	is_visited = [False] * length
	cost = [float('inf')] * length
	path = [[-1]] * length
	cost[start] = 0
	path[start] = [start]
	min_cost = 0
	next_vertex = start
	while min_cost < float('inf'):
		is_visited[next_vertex] = True
		for i, vertex in enumerate(graph[next_vertex]):
			if vertex != 0 and not is_visited[i]:
				if cost[i] > vertex + cost[next_vertex]:
					cost[i] = vertex + cost[next_vertex]
					if next_vertex != start:
						path[i] = path[next_vertex] + [i]
					else:
						path[i] = [next_vertex] + [i]
		min_cost = float('inf')
		for i in range(length):
			if min_cost > cost[i] and not is_visited[i]:
				min_cost = cost[i]
				next_vertex = i
	Vertex = namedtuple('Vertex', ['name', 'path_cost', 'path'])
	vertexes = []
	for i in range(length):
		vertexes.append(Vertex(i, cost[i], path[i]))
	return vertexes


def main():
	graph = [
		[0, 0, 1, 1, 9, 0, 0, 0],
		[0, 0, 9, 4, 0, 0, 5, 0],
		[0, 9, 0, 0, 3, 0, 6, 0],
		[0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 1, 0],
		[0, 0, 0, 0, 0, 0, 5, 0],
		[0, 0, 7, 0, 8, 1, 0, 0],
		[0, 0, 0, 0, 0, 1, 2, 0],
	]
	base_vertex = int(input('Введите базовую вершину графа: '))
	vertexes = dejkstra(graph, base_vertex)
	for vertex in vertexes:
		if vertex.path_cost < float('inf') and vertex.name != base_vertex:
			print(
				f'Путь от {base_vertex} к {vertex.name}:\t затраты {vertex.path_cost}, \t  идти нужно через: \t {vertex.path}')
		elif vertex.path_cost == float('inf'):
			print(f'Путь от {base_vertex} к {vertex.name} невозможен')
	print()


if __name__ == '__main__':
	main()
